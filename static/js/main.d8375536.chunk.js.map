{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/Feedback.jsx","components/Section/section.jsx","components/Notification/Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","isNaN","FeedbackOptions","options","onLeaveFeedback","map","name","onClick","Section","title","children","Notification","message","App","state","addFeedback","e","persist","setState","prevState","target","Object","values","this","reduce","acc","stat","Math","round","countTotalFeedback","keys","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGaA,EAAa,SAAC,GAMpB,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,MACAC,EACI,EADJA,mBAEA,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDACsBE,MAAMD,GAAsB,EAAIA,EADtD,WCbOE,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAC7BD,EAAQE,KAAI,SAACC,GAAD,OACV,wBAAmBA,KAAMA,EAAMC,QAASH,EAAxC,SACGE,GADUA,OCFJE,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/B,OACE,qCACE,6BAAKD,IACJC,MCJMC,EAAe,SAAAC,GAAO,OAAI,6BAAKA,EAAQA,WCG/BC,E,4MACnBC,MAAQ,CAAElB,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EACpCiB,YAAc,SAACC,GACbA,EAAEC,UACF,EAAKC,UAAS,SAACC,GACb,OAAO,eAAGH,EAAEI,OAAOd,KAAOa,EAAUH,EAAEI,OAAOd,MAAQ,O,wDAIzD,WACE,OAAOe,OAAOC,OAAOC,KAAKT,OAAOU,QAAO,SAACC,EAAKC,GAE5C,OADAD,GAAOC,IAEN,K,6CAGL,WACE,OAAOC,KAAKC,MAAOL,KAAKT,MAAMlB,KAAO2B,KAAKM,qBAAwB,O,oBAGpE,WACE,OACE,qCACE,cAAC,EAAD,CAASpB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEN,QAASkB,OAAOS,KAAKP,KAAKT,OAC1BV,gBAAiBmB,KAAKR,gBAG1B,cAAC,EAAD,CAASN,MAAM,aAAf,SACGc,KAAKM,qBAAuB,EAC3B,cAAC,EAAD,CACEjC,KAAM2B,KAAKT,MAAMlB,KACjBC,QAAS0B,KAAKT,MAAMjB,QACpBC,IAAKyB,KAAKT,MAAMhB,IAChBC,MAAOwB,KAAKM,qBACZ7B,mBAAoBuB,KAAKQ,oCAG3B,cAAC,EAAD,CAAcnB,QAAQ,+B,GAvCDoB,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8375536.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Statistics = ({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) => {\r\n  return (\r\n    <>\r\n      <p>Good: {good}</p>\r\n      <p>Neutral: {neutral}</p>\r\n      <p>Bad: {bad}</p>\r\n      <p>Total: {total}</p>\r\n      <p>\r\n        Positive Feedback: {isNaN(positivePercentage) ? 0 : positivePercentage}%\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) =>\r\n  options.map((name) => (\r\n    <button key={name} name={name} onClick={onLeaveFeedback}>\r\n      {name}\r\n    </button>\r\n  ));\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Notification = message => <h2>{message.message}</h2>;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};","import React, { Component } from \"react\";\nimport { Statistics } from \"./components/Statistics/Statistics\";\nimport { FeedbackOptions } from \"./components/FeedbackOptions/Feedback\";\nimport { Section } from \"./components/Section/section\";\nimport { Notification } from \"./components/Notification/Notification\";\n\nexport default class App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n  addFeedback = (e) => {\n    e.persist();\n    this.setState((prevState) => {\n      return { [e.target.name]: prevState[e.target.name] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    return Object.values(this.state).reduce((acc, stat) => {\n      acc += stat;\n      return acc;\n    }, 0);\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  }\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.addFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}